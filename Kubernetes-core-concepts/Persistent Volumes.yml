Persistent Volumes
Create a Persistent Volume

Create a Persistent Volume (PV) named pv-volume that has the following specifications:

    a Delete persistentVolumeReclaimPolicy
    Uses the strageClass named local-path
    Uses hostPath volume type, at path /mnt/data
    Has a capacity of 1Gi
    Access mode is set to ReadWriteOnce

Once you've created the PV, list all the persistentvolumes in the cluster.

Solution

cat <<EOF | k apply -f -
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-volume
spec:
  persistentVolumeReclaimPolicy: Delete
  storageClassName: "local-path"
  hostPath:
    path: "/mnt/data"
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
EOF


Create a Persistent Volume Claim

Create a Persistent Volume Claim (PVC) named pvc-claim that has the following specifications:

    Uses the storageClass named local-path
    Access mode set to ReadWriteOnce
    Requests 1Gi of storage

Once you've created the PVC, list all the persistentvolumeclaims in the cluster.

Solution

cat <<EOF | k apply -f -
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pv-claim
  namespace: default
spec:
  storageClassName: "local-path"
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
EOF

k get pvc -n default


Create a Pod

Now that we have created the persistentvolume and the persistentvolumeclaim resources in Kubernetes, let's create a pod that can use the volume.

Create a pod named pv-pod that uses the image nginx with a volume named pv-storage . Mount the volume inside the container at /usr/share/nginx/html and specify the pvc by it's name (pv-claim ).

After you've created the pod, list all the pods in the default namespace.

Solution

cat <<EOF | k apply -f -
apiVersion: v1
kind: Pod
metadata:
  name: pv-pod
spec:
  containers:
    - name: pv-container
      image: nginx
      volumeMounts:
        - mountPath: "/usr/share/nginx/html"
          name: pv-storage
  volumes:
    - name: pv-storage
      persistentVolumeClaim:
        claimName: pv-claim
EOF

k get po -n default


Create a second Pod

Now that our pod is created, and it's using the volume that we provisioned, let's write some data to the volume and see if the data persists beyond the life of the pod.

We'll start by getting a shell to the container in the pod pv-pod and performing the command:

echo "<h1>This is my website!</h1>" > /usr/share/nginx/html/index.html

Once you've written that index.html file to the volume, go ahead and delete the pod.

Start a new pod with the same specifications, but name it pv-pod2 instead of pv-pod . Get a shell to the nginx container running inside of pv-pod2 and see if the index.html file is still there. If it is, that means that our data persisted beyond the life of a pod.

Solution

Get a shell to the container inside of pv-pod

k exec -it pv-pod -- sh

After you've executed the command at the top of this page (to write the file index.html), delete the pod named pv-pod

k delete po pv-pod

Create a new pod named pv-pod2 with the same specs (the mount path and pvc name must be the same)

cat <<EOF | k apply -f -
apiVersion: v1
kind: Pod
metadata:
  name: pv-pod2
spec:
  containers:
    - name: pv-container
      image: nginx
      volumeMounts:
        - mountPath: "/usr/share/nginx/html"
          name: pv-storage
  volumes:
    - name: pv-storage
      persistentVolumeClaim:
        claimName: pv-claim
EOF

Get a shell to the nginx container in pod pv-pod2

k exec -it pv-pod2 -- sh

From the shell to the container, see if the file index.html is still there

ls /usr/share/nginx/html/



apiVersion: v1
kind: Pod
metadata:
  name: pv-pod
  namespace: default
spec:
  volumes:
  - name: pv-storage
    persistentVolumeClaim:
      claimName: pvc-claim
  containers:
  - name: pv-pod
    image: nginx
    volumeMounts:
      - mountPath: "/usr/share/nginx/html"
        name: pv-storage




apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-volume
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Delete
  storageClassName: local-path
  hostPath:
    path: "/mnt/data"



apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-claim
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: local-path